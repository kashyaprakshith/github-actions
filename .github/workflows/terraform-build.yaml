name: build ..

on:
  push:
    branches:
      - 'main'
      - 'test-terraform'
    paths-ignore:
      - 'docs/**'
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

env:
  TF_CLOUD_ORGANIZATION: "cofinity-x"  ## terraform organization name
  TF_API_TOKEN: "${{ secrets.TFC_API_TOKEN }}"     ## terraform cloud API token
  TF_WORKSPACE: "cofinity-x-cloud-infra"              ## terraform workspace 
  CONFIG_DIRECTORY: "./01_core_cluster/:./02_devsecops_testing_cluster/:./03_dev_cluster/:./04_int_cluster/:./05_pre_prod_cluster/:./06_beta_cluster/:./07_vault_cluster/"

permissions: read-all

jobs:
  terraform-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      ## Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.5"

      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-
            ${{ runner.os }}-

      ## Initialize Terraform     
      - name: Initialize Terraform
        run: |
          #!/usr/bin/env bash

          for dir in $(dirname $(find . \( -name "*.tf" \)) | sort | uniq) ; do
            cd "$dir"
            echo "Directory: $dir"
            ls 
            terraform init || true
            cd /home/runner/work/cofinity-x-cloud-infra/cofinity-x-cloud-infra
          done
        continue-on-error: false      
            
      # Terraform Validate
      - name: Validate Terraform code
        run: |
          #!/usr/bin/env bash

          for dir in $(dirname $(find . \( -name "*.tf" \)) | sort | uniq) ; do
            cd "$dir"
            echo "Directory: $dir"
            ls 
            terraform validate || true
            cd /home/runner/work/cofinity-x-cloud-infra/cofinity-x-cloud-infra
          done
        continue-on-error: false
        
  ## tfsec Scan
  tfsec:
    permissions:
      security-events: write
      contents: read
      actions: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: tfsec
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          working_directory: . ## replace "./" with the path of terraform files for scanning.
          sarif_file: tfsec.sarif
      - name: see sarif
        run: cat tfsec.sarif
      # continue-on-error: true
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: tfsec.sarif

  ## Checkov Scan        
  checkov:
    permissions:
      security-events: write
      contents: read
      actions: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Test with checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .  ## replace "./" with the path of terraform files for scanning.
          framework: terraform
          download_external_modules: true
          output_file_path: checkov-results.sarif
        continue-on-error: true
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif

  ## Code Quality Check
  ## SonarCloud
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
       
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}        

  ## Terraform lint
  terraform-lint:
    permissions:
      security-events: write
      contents: read
      actions: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

      - uses: terraform-linters/setup-tflint@v3
        name: Setup TFLint
        with:
          tflint_version: v0.47.0
          
      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint and generate SARIF
        run: tflint --recursive -f sarif > tflint-results.sarif 
        continue-on-error: true

      - name: see sarif
        run: cat tflint-results.sarif

      - name: see files
        run:  ls -al

      - name: Upload TFLint SARIF output to GHAS
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: tflint-results.sarif

  ## Run Terraform Format
  terraform-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Terraform Format
        run: terraform fmt -recursive   

  ## Terraform Cloud Plan        
  tfc-plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      ## Upload the Configuration to Terraform Cloud
      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.4
        id: upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      ## Create Run
      - name: Create Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.4
        id: run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
          plan_only: true

      ## Plan Results
      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.4
        id: plan-output
        with:
          plan: ${{ steps.run.outputs.plan_id }}
