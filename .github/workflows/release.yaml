name: "Bump release version"

on: [push]
 
permissions: read-all

jobs:
  version-bump:
    
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Jq
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version package.json -r'
      
      - name: Get project version
        run: |
          CURRENT_PROJECT_VERSION="${{ steps.version.outputs.value }}"
          echo "CURRENT_PROJECT_VERSION=${CURRENT_PROJECT_VERSION}" >> "$GITHUB_ENV"
          echo "$GITHUB_EN"
      - name: see last commit message
        run: git log -1 --pretty=%B    

      - name: set global variables.
        run: |
          git config --global user.name "ACN-rakshith"
          git config --global user.email "rakshith.kashyap@accenture.com"

      - name: Check version impact and increment accordingly
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if ! echo "${COMMIT_MSG}" | grep -qE '\[\b[A-Z][A-Z0-9_]+-[1-9][0-9]*\]\[(major|minor|patch)\]:\s\w+' &> /dev/null ; then
            echo "Squashed commit message does not meet the standard regex"
            exit 1
          fi
          COMMIT_IMPACT_TYPE=$(echo "${COMMIT_MSG}" | grep -oE "(major|minor|patch)" | head -1)
          case $COMMIT_IMPACT_TYPE in
            major)
              npm --no-git-tag-version version --allow-same-version major
              echo "NEXT_PROJECT_VERSION=${{ steps.version.outputs.value }}" >> "$GITHUB_ENV"
              echo "NEXT_PROJECT_VERSION=${{ steps.version.outputs.value }}"
              ;;
            minor)
              npm --no-git-tag-version version --allow-same-version minor
              echo "NEXT_PROJECT_VERSION=${{ steps.version.outputs.value }}" >> "$GITHUB_ENV"
              echo "NEXT_PROJECT_VERSION=${{ steps.version.outputs.value }}"
              ;;
            patch)
              npm --no-git-tag-version version --allow-same-version patch
              echo "NEXT_PROJECT_VERSION=${{ steps.version.outputs.value }}" >> "$GITHUB_ENV"
              echo "NEXT_PROJECT_VERSION=${{ steps.version.outputs.value }}"
              ;;
            *)
              echo "Invalid impact type"
              exit 1;;
          esac
      
      - name: Commit, tag and push
        run: |
          git add package.json package-lock.json
          git commit -m "Bumping Version from ${CURRENT_PROJECT_VERSION} to ${NEXT_PROJECT_VERSION}"
          git tag -a "${NEXT_PROJECT_VERSION}" -m "Release v${NEXT_PROJECT_VERSION}"
          git push --atomic --follow-tags origin init-javascript "${NEXT_PROJECT_VERSION}"   
